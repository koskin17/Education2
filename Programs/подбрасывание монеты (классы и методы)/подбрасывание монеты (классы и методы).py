'''
Импортируем модуль random для генерации случайного числа.
Его импортируем полностью, хотя в этом случае можно импортировать
только его составляющий модуль randint, который
позволит генерировать случайное число в диапазоне.
Сам по себе модуль не работает.
Его нужно использовать с функциями,
из числа которых понадобиться функция randint()
'''

import random
'''
Создаём класс, который будет имитировать подбрасывание монеты
'''

class Coin:
    ''' Первым методом в любом классе идёт метод init,
        который инициализирует создание атрибутов объекта
        этого класса '''
    def __init__(self):
        self.__sideup = 'Орёл'

    ''' Теперь создаём метод, который имитирует
        подбрасывание монеты '''
    def toss(self):
        if random.randint(0,1) == 0:
            self.__sideup = 'Орёл'
        else:
            self.__sideup = 'Решка'

    ''' Теперь создаём метод, который вернёт состояние
        монеты '''
    def get_sideup(self):
        return self.__sideup

''' Теперь создаём главную функцию, которая и будет работать,
т.е. имитировать подбрасывание монеты '''
def main():
    ''' Создаём объект на базе класса Coin, т.е. присваиваем
        переменноё класс и получится, что это будет объект
        конкретного класса'''
    my_coin = Coin()
    
    ''' Далее функция должна функция должна показать,
        какой стороной обращена монета сначала.
        Мы образаемся к методу get_sideup метода Coin.
        Т.к. изначально значение sideup было установлено 'Орёл' при инициализации метода __init__,
        монета изначально лежит орлом вверх'''
    print('Сейчас монета обращена вверх: ', my_coin.get_sideup())

    ''' Теперь имитируем подбрасывание монеты,
        выводя надпись и вызывая метод подбрасывания моенты toss(),
        который был описан в методе Coin, который был присвоем объекту my_coin '''
    print('Подбрасываем монету...')
    my_coin.toss()

    ''' После этого, в зависимости от полученного результата
        работы метода toss() и функции random.randinit(),
        выводим на экран сторону, которой легла монета '''
    print('Монета легла стороной:', my_coin.get_sideup())

''' Теперь, когда у нас описан класс, описаны атрибуты,
которыми будут обладать объекты класса,
и методы, которыми эти атрибуты объектов будут обрабатываться,
можно вызывать основную функцию.
Для наглядности сделаем цикл вызова функции 10 раз, чтобы увидеть, что выпадает случайное число'''

for i in range(10):
    main()
    print()
    
''' Можно не писать дополнительный метод get_sideup() для возвращения состояния монеты после подбрасывания.
Результат можно сразу возвращать в методе toss().
Для этого значение sideup изначально в методе __init__ устанавливается как "Орёл.
В самом методе инициализации self.sideup приравнивается к sideup.
Метод подбрасывания монеты toss() остаётся, но в нём сразу возвращаетс результат работы'''
class Coin2:
    def __init__(self, sideup = 'Орёл'):
        self.sideup = sideup

    def toss2(self):
        if random.randint(0,1) == 0:
            self.sideup = 'Орёл'
            return self.sideup
        else:
            self.__sideup = 'Решка'
            return self.sideup

def main2():
    my_coin2 = Coin2()
    ''' Если изначальное положение монеты установлено, т.е. установлено значение атрибута sideup,
        то для его вывода на экран нужно в объекте обратиться к этому его атрибуту, т.е. к его этой характеристике my.coin.sideup'''
    print('Сейчас монета обращена вверх: ', my_coin2.sideup)
    print('Подбрасываем монету...')
    my_coin2.toss2()
    print('Монета легла стороной:', my_coin2.sideup)

print('Результат работы второго варианта'.upper())
for i in range(10):
    main2()
    print() 
