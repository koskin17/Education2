.header {
  /* Сейчас в CSS margin: auto озачает, что сверху и снизу будет 0, а слева и справа будет автоматически */
  margin:auto;
  background-color: var(--secondary-background-color);

  .header__nav {
    padding: 0 15px;
  }

  @media (min-width: 600px) {
    .header__nav {
      display: flex;
      align-items: center;
    }
  }

  .header__logo,
  .header__title {
    /* Размер шрифта лучше всего задавать в rem.\
    Rem - это размер шрифта корневого элемента. По умолчанию и чаще всего в браузерах он равен 16.
    Rem рассчитывается как деление размера в пикселях на 16.
    В этом случае их можно с помощью JavaScript масштабировать */
    font-size: 3.5rem; /* 56 пикселей разделить на 16*/
    text-align: center;
    text-transform: uppercase;
    font-weight: bold;
  }

  .header__menu {
    display: flex;
    flex-direction: column;

    .menu__item {
      color: var(--primary-text-color);
      text-decoration: none;
    }

    .menu__item:hover {
      text-decoration: underline;
    }
  }

  @media (min-width: 600px) {
    .header__menu {
      flex-direction: row;
      /* По умолчанию, flex отводит объектам минимально необходимое количество.
      Flex 1 указывает элементам, чтобы они занимали всё доступное пространство в контейнере, равномерно в нём распределяясь */
      flex: 1;
      justify-content: space-around;
    }
  }

  .header__banner {
    /* Для того, чтобы правильной указать путь к картинке, надо перед папкой с картинкой поставить ../ - это будет означать выйи из текущей папки и зайи в папку img
    Когда указывается просто background и линейный градиент вместе с картинкой, то фактический получается как бы два бэкграунда или два слоя:
      - певрый - прозрачный слой - цвет;
      - второй - картинка, которая лежит под этим цветом.
      Это один из  самых простых и примитивных способов затемнить бэкграунд */
    background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),
      url(../img/baby-yoda.svg);

    /* backgroind-size: cover покрывает контейнер картинкой, а center - размещает картинку по центру */
    background-size: cover;
    background-position: center;

    /* Для установления размера блока (высота, к примеру), то лучше использовать min-height.
    Если использовать просто height и в блоке будет контент, который в него не влазит, то контент просто вылезет за границы блока.
    Если же указана минимальный размер (min-height, к примеру), и контент больше, то автоматичсеки увеличится блок. */
    min-height: 500px;

    /* Для размещения текста по центру контейнера надо включить flex и указать aling-items: center и justify-content: center;
    Также указывается flex-direction на column, чтобы текст не стоят в ряд.*/
    display: flex;
    
    align-items: center;
    justify-content: center;
    flex-direction: column;

    .header__title {
        color: var(--secondary-text-color);
    }
  }
}
