/*
Замыкание в JavaScript — это один из самых важных и полезных концептов, но его может быть сложно понять новичкам. Давай объясню простыми словами.

Представь такую ситуацию:
У тебя есть функция, и внутри этой функции ты создаешь другую функцию. Эта внутренняя функция имеет доступ не только к своим собственным переменным, но и к переменным родительской функции. Даже после того, как родительская функция завершила свою работу, внутренняя функция помнит значения переменных родительской функции. Вот это и называется замыканием.

Пример:
function outerFunction() {
    let outerVariable = "Я из внешней функции!";

    function innerFunction() {
        console.log(outerVariable);
    }

    return innerFunction;
}

const closureExample = outerFunction();
closureExample();  // Выведет: "Я из внешней функции!"
Что здесь происходит?
У нас есть outerFunction, в которой создается переменная outerVariable и функция innerFunction.
Внутренняя функция innerFunction может обращаться к переменной outerVariable, потому что она объявлена внутри той же функции.
Когда мы вызываем outerFunction, она возвращает саму функцию innerFunction, которая сохраняется в переменной closureExample.
Даже после того, как outerFunction завершила выполнение, функция innerFunction, находящаяся внутри переменной closureExample, помнит значение переменной outerVariable, благодаря замыканию.
Простой вывод:
Замыкание — это когда функция "запоминает" окружение, в котором она была создана, и сохраняет к нему доступ, даже если это окружение уже перестало существовать в текущем контексте. Это мощный инструмент для управления данными и создания функций с приватными переменными.
*/
