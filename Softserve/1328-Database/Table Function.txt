---- Table Function.
	 Их суть в том, что они вохвращают не один результат или строку, а полноценную таблицу, которую потом можно использовать для анализа или для джойна JOIN с другими таблицами.
	 При описании табличной функции мы внутри функции должны описать все колонки, которые будут в результирующей таблице.
	 
	-- К примеру, функция, которая возвращает все детали по продуктам
	-- В функцию не передаются никакие аргументы
	-- Создаём функцию без передачи каких-то параметров
	CREATE OR REPLACE FUNCTION myshop.get_product_details()
	-- Функция будет возвращать таблицу
	RETURNS TABLE (
	  product_id BIGINT,
	  product_name VARCHAR,
	  category_name VARCHAR
	)
	AS
	$$
	BEGIN
	  -- В функцию будет передаваться запрос
	  RETURN QUERY
	  -- Из-за того, что при создании таблицы CREATE TABLE мы прописали названия колонок, база сама сделает алиас наименований колонок с перечисленными полями в SELECT
	  -- Выбираем имя id продукта, имя продукта и категорию
	  SELECT p.product_id, p.name, c.name
	  -- Из таблицы продукты
	  FROM myshop.products AS p
	  -- По которым id продукта совпадает с id продукта в таблице "категории продуктов"
	  JOIN myshop.product_categories AS pc ON p.product_id = pc.product_id
	  -- И также по которым id в "категории" совпадает с id в "категории продуктов"
	  JOIN myshop.category AS c ON c.category_id = pc.category_id;
	END;
	$$
	LANGUAGE plpgsql;

	-- Теперь вызываем эту функцию
	SELECT * FROM myshop.get_product_details();
	
	-- Кастомный тип
	CREATE TYPE myshop.client_order_info AS (
	  client_name VARCHAR,
	  order_count INT
	);

	-- Теперь создаём функцию, которая будет возвращать кол-во заказов по всем клиентам
	CREATE OR REPLACE FUNCTION myshop.get_clients_orders()
	-- Возвращает функция что-то похожее на таблицу или множество всех колонок той таблицы или кастомного типа данных, которую мы создадим кодом выше
	-- Командой возврата всех колонок является команда SETOF
	RETURNS SETOF myshop.client_order_info AS
	$$
	BEGIN
	  RETURN QUERY
	  SELECT c.name, COUNT(o.order_id)::INT
	  FROM myshop.clients AS c
	  JOIN myshop.orders AS o ON c.client_id = o.client_id
	  GROUP BY c.name;
	END;
	$$
	LANGUAGE plpgsql;

	SELECT client_name, order_count FROM myshop.get_clients_orders()
	
---- Внутри функции можно создать временную таблицу, которая будет существовать только в рамках текущей сессии.
---- В неё можно подтянуть разные данные из разных таблиц, потом вернуть запрос с нужными данными из этой таблицы и потом дропнуть эту таблицу: DROP TABLE "имя таблицы".

---- Тип данных RECORD
-- Функция для получения детальной информации о продукте по идентификатору продукта
-- Для этого создаётся переменная product_record, которая будет иметь динамический тип RECORD
	CREATE OR REPLACE FUNCTION myshop.get_product_info(_product_id BIGINT)
	RETURNS TABLE(id BIGINT, product_name VARCHAR, product_quantity INT) AS $$
	DECLARE
	  product_record RECORD;
	BEGIN
	  -- Далее делается SELECT по одному id, т.е. гарантированно получаем одну запись / один RECORD, но три разных колонки в этой строке.
	  SELECT product_id, name, quantity INTO product_record
	  FROM myshop.products
	  WHERE product_id = _product_id;
	  
	  -- Далее полученные данные для полей присваиваются тем поля, которые мы описали в RECORD
	  id := product_record.product_id;
	  product_name := product_record.name;
	  product_quantity := product_record.quantity;
	  
	  -- В конце возвращается NEXT, который позволяет вернуть полученные данные как следующую строку таблицы
	  RETURN NEXT;
	END;
	$$ LANGUAGE plpgsql;

	-- После вызываем созданную функцию, передаём ей параметр в виде id продукта и получаем информацию в виде таблицы
	-- Другими словами, мы получаем кастомный типа строки, с которым можно далее делать всё необходимое
	SELECT * FROM myshop.get_product_info(1);
	
---- Анонимные функции
---- Они полезны, если не хочется создавать отдельную специальную функцию, но какой-то код нужно выполнить буквально здесь и сейчас.
---- Обозначаются и начинаются анонимные функции с DO $$, далее идёт BEGIN и END $$;, между которыми описывается необходимый код:
	DO $$
	BEGIN
		(необходимый код)
	END $$;
	
	Важно помнить, что анонимные функции не могут принимать аргументы, не могут возвращать какие-то значения / результаты. Т.е. они просто позволяют выполнить какой-то код здесь и сейчас с циклами, flow control и т.д.
	
---- RAISE или служебные сообщения.
---- RAISE позволяет выводить сообщения про ошибки или какие-то другие служебные сообщения, в том числе записать что-то в log работы Базы Данных.
	
	RAISE INFO 'Helo world'
	
	Аналогичным образом вызывается исключение EXCEPRION, которое прерывается текущее выполнение программы:
	DO $$
		BEGIN
			RAISE EXCEPTION 'Helo exeption'
		END;
	$$;
	При вызове исключения можно добавить дополнительную поясняющую строку, которая будет содержать текст-подсказку.
	USING HINT = '(текст)':
	DO $$
		BEGIN
			RAISE EXCEPTION 'Helo exeption'
		USING HINT = 'Please check your query';
		END;
	$$;