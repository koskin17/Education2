-- SQL Veiws --
-- Для создание View используется команда CREATE VIEW
-- Можно использовать CREATE OR REPLACE VIEW - проверяет наличие вьюшки и заново её создаёт, если такая есть
-- Также обязательно указывается название вьюшки CREATE OR REPLACE VIEW example
-- Это название является алиасов для запроса, который спрятан в этой вьюшке.
-- Результат вьюшек размещается среди таблиц Базы Данных под соответствующим названием, которое было прописано в качестве алиаса.
-- В вьюшке нельзя использовать две одинаковые колонки (одна колонка два раза). Если SELECT пропустит указание колонки 2 раза и потом в результате просто покажет одну колонку, то при формировании вьюшке такоего делать нельзя.

-- Пример создания горизонтальной вьюшки
CREATE OR REPLACE VIEW myshop.horizontal_view AS
SELECT *
FROM myshop.products
WHERE quantity > 20


SELECT * FROM myshop.horizontal_view

-- Пример создания вертикальной вьюшки
CREATE OR REPLACE VIEW myshop.vertical_veiw AS
SELECT name, quantity
FROM myshop.products

SELECT * FROM myshop.vertical_veiw

-- Пример создания миксованной вьюшки
CREATE OR REPLACE VIEW myshop.mixed_veiw AS
SELECT name
FROM myshop.clients
WHERE client_id IN (SELECT client_id FROM myshop.orders GROUP BY client_id HAVING COUNT(order_id) >= 1)

-- Пример создания вьюшки с JOIN
CREATE OR REPLACE VIEW myshop.join_view AS
SELECT p.name AS product_name, c.name AS category_name
FROM myshop.products AS p
JOIN myshop.product_categories AS pc ON pc.product_id = p.product_id
JOIN myshop.category AS c ON c.category_id = pc.category_id

-- Вариант вьбшки с подзапросом
CREATE OR REPLACE VIEW myshop.subquery_view AS
SELECT p.name, (SELECT COUNT(*) FROM myshop.product_categories AS pc WHERE pc.product_id = p.product_id) AS category_count
FROM myshop.products AS p

-- Вариант вьюшки с UNION
CREATE OR REPLACE VIEW myshop.union_view AS
SELECT name, 'products' AS type FROM myshop.products
UNION
SELECT name, 'category' FROM myshop.category

-- Вариант вьюшки на базе вьюшке
CREATE OR REPLACE VIEW myshop.based_on_other_view AS
SELECT name, quantity * 2 AS double_quantity
FROM myshop.vertical_veiw

-- Можно обновлять уже созданную вьюшку. К примеру, в горизонтальной вьюшке обновляем количество. В этом случае без доступа и изменения оригинальной таблицы можно изменить то, что мы виим или то, что мы показываем пользователю. При этом важно помнить, что обновляются только те данные, которые отображаются в вьюшке. Если по какой-то причине данные в вьюшке не отображаются или перестали отображаться, то и доступ к ним через эту вьюшку теряется. Вьюшка - виртуальная таблица, которая есть "здесь и сейчас" в том виде, в котором есть. Если данные в ней как-то отфильтровались и из-за этого что-то из вьюшки пропала, то этого уже в вьюшке нет и доступа к этому нет.
UPDATE myshop.horizontal_view SET quantity = 40
WHERE product_id = 1

-- Однако в вьюшка есть механизм CHECKOPTION. Он позволяет установить ограничение для изменения данных во вьюшке. К примеру, если стоит ограничение на кол-во >= 20, то во вьюшке нельзя будет изменять данные кол-ва на меньше 20-ти - будет ошибка о том, что не соответствует ограничению.
CREATE OR REPLACE VIEW myshop.check_view AS
SELECT * FROM myshop.products
WHERE quantity >= 20
WITH CHECK OPTION;

-- Материализованная вьюшка. Её главное отличие в слове MATERIALIZED и она как бы конвертировала в физическую таблицу, в отличие от обычной вьюшки, которая является виртуальной таблицей. И материализованная вьюшка - это таблица, которая сохранена на жёсткий диск, проиндексована и т.д. и работать с ней можно точно также, как и с обычной таблицей Базы Данных.
-- При этом важно помнить, что обычная вьюшка - это виртуальная таблица, которая обновляется в режиме реального времени, а материализованная вьюшка не обновляется так, она как бы статичная, как таблица.
-- Для того, чтобы обновлять материализованную вьюшку используется команда REFRESH MATERIALIZED VIEW myshop.total_product_sales
-- К примеру, создаём вьюшку, которая будет нам показывать аналитическую информацию
CREATE MATERIALIZED VIEW myshop.total_product_sales AS
SELECT p.name AS product_name, SUM(op.quantity) AS total_quantity
FROM myshop.products AS p
JOIN myshop.products AS op ON p.product_id = op.product_id
GROUP BY p.name;

SELECT * FROM myshop.total_product_sales