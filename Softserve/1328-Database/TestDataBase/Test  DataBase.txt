-- КОД ДЛЯ СОЗДАНИЯ БАЗЫ ДАННЫХ В SUPABASE

-- Создание таблицы курортов
CREATE TABLE Resorts (
    resort_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(50) NOT NULL CHECK (type IN ('mountain-ski', 'sea', 'other')),
    quality INT CHECK (quality BETWEEN 1 AND 5),
    country VARCHAR(100) NOT NULL,
    location VARCHAR(255) NOT NULL
);

-- Создание таблицы предложений по стоимости отдыха
CREATE TABLE Offers (
    offer_id SERIAL PRIMARY KEY,
    resort_id INT NOT NULL,
    cost DECIMAL(10,2) NOT NULL,
    description TEXT,
    FOREIGN KEY (resort_id) REFERENCES Resorts(resort_id)
);

-- Создание таблицы клиентов
CREATE TABLE clients (
    client_id SERIAL PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    phone VARCHAR(20) UNIQUE NOT NULL,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_clients_email ON clients(email);
CREATE INDEX idx_clients_phone ON clients(phone);

-- Создание таблицы агентов
CREATE TABLE Agents (
    agent_id SERIAL PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20) UNIQUE NOT NULL,
    commission_percentage DECIMAL(5,2) NOT NULL
);

-- Создание таблицы контрактов
CREATE TABLE Contracts (
    contract_id SERIAL PRIMARY KEY,
    client_id INT NOT NULL,
    agent_id INT NOT NULL,
    resort_id INT NOT NULL,
    offer_id INT NOT NULL,
    sign_date DATE NOT NULL,
    rest_start DATE NOT NULL,
    rest_end DATE NOT NULL,
    FOREIGN KEY (client_id) REFERENCES Clients(client_id),
    FOREIGN KEY (agent_id) REFERENCES Agents(agent_id),
    FOREIGN KEY (resort_id) REFERENCES Resorts(resort_id),
    FOREIGN KEY (offer_id) REFERENCES Offers(offer_id)
);

-- Создание таблицы фотографий
CREATE TABLE Photos (
    photo_id SERIAL PRIMARY KEY,
    resort_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    file_path VARCHAR(255) NOT NULL,
    tags TEXT,
    FOREIGN KEY (resort_id) REFERENCES Resorts(resort_id)
);

-- Создание таблицы комментариев
CREATE TABLE Comments (
    comment_id SERIAL PRIMARY KEY,
	resort_id INT NOT NULL,
    photo_id INT NOT NULL,
    client_id INT NOT NULL,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (photo_id) REFERENCES Photos(photo_id),
    FOREIGN KEY (client_id) REFERENCES Clients(client_id),
	FOREIGN KEY (resort_id) REFERENCES Resorts(resort_id)
);

-- Вставка тестовых данных
INSERT INTO Resorts (name, type, quality, country, location) VALUES
('Alpine Paradise', 'mountain-ski', 5, 'Switzerland', 'Alps'),
('Tropical Bliss', 'sea', 4, 'Thailand', 'Phuket'),
('Ski Haven', 'mountain-ski', 3, 'Canada', 'Whistler'),
('Ocean Breeze', 'sea', 5, 'Maldives', 'North Male Atoll'),
('Snowy Peaks', 'mountain-ski', 4, 'France', 'Chamonix'),
('Sunny Retreat', 'sea', 3, 'Spain', 'Costa Brava'),
('Luxury Escape', 'sea', 5, 'Bali', 'Uluwatu'),
('Winter Wonderland', 'mountain-ski', 4, 'Austria', 'Tyrol'),
('Golden Sands', 'sea', 4, 'Egypt', 'Sharm El-Sheikh'),
('Icy Slopes', 'mountain-ski', 3, 'Norway', 'Lillehammer');

INSERT INTO Offers (resort_id, cost, description) VALUES
(1, 2000.00, '5-star ski package'),
(2, 1500.00, 'Luxury beach retreat'),
(3, 1200.00, 'Skiing adventure'),
(4, 2500.00, 'All-inclusive Maldives'),
(5, 1800.00, 'Skiing in the Alps'),
(6, 1000.00, 'Budget-friendly beach'),
(7, 3000.00, 'Exclusive island getaway'),
(8, 1700.00, 'Winter sports package'),
(9, 1400.00, 'Red Sea diving experience'),
(10, 1600.00, 'Scandinavian ski lodge');

INSERT INTO Clients (full_name, email, phone) VALUES
('John Doe', 'john.doe@example.com', '+123456789'),
('Alice Smith', 'alice.smith@example.com', '+987654321'),
('Robert Brown', 'robert.brown@example.com', '+192837465'),
('Emma White', 'emma.white@example.com', '+918273645'),
('Michael Green', 'michael.green@example.com', '+564738291'),
('Sophia Black', 'sophia.black@example.com', '+102938475'),
('David Johnson', 'david.johnson@example.com', '+564738292'),
('Olivia Moore', 'olivia.moore@example.com', '+675849302'),
('James Wilson', 'james.wilson@example.com', '+758493012'),
('Emily Davis', 'emily.davis@example.com', '+849302756');

INSERT INTO Agents (full_name, email, phone, commission_percentage) VALUES
('Anna Ivanova', 'anna.ivanova@example.com', '+380123456789', 12.50),
('Boris Petrov', 'boris.petrov@example.com', '+380987654321', 10.00),
('Elena Smirnova', 'elena.smirnova@example.com', '+380192837465', 15.75),
('Igor Sidorov', 'igor.sidorov@example.com', '+380918273645', 9.30),
('Marina Pavlova', 'marina.pavlova@example.com', '+380564738291', 11.25);

INSERT INTO Contracts (client_id, agent_id, resort_id, offer_id, sign_date, rest_start, rest_end) VALUES
-- Клиент 1 с двумя контрактами
(1, 1, 1, 1, '2023-01-10', '2023-05-01', '2023-05-15'),
(1, 2, 2, 2, '2023-02-15', '2023-06-05', '2023-06-20'),

-- Клиент 2 с двумя контрактами
(2, 3, 3, 3, '2023-03-20', '2023-07-10', '2023-07-25'),
(2, 4, 4, 4, '2023-04-25', '2023-08-15', '2023-08-30'),

-- Клиент 3 с двумя контрактами
(3, 5, 5, 5, '2023-05-30', '2023-09-20', '2023-10-05'),
(3, 1, 6, 6, '2023-06-10', '2023-10-01', '2023-10-15'),

-- Клиент 4 с двумя контрактами
(4, 2, 7, 7, '2023-07-15', '2023-11-05', '2023-11-20'),
(4, 3, 8, 8, '2023-08-20', '2023-12-10', '2023-12-25'),

-- Клиент 5 с двумя контрактами
(5, 4, 9, 9, '2023-09-25', '2024-01-15', '2024-01-30'),
(5, 5, 10, 10, '2023-10-30', '2024-02-20', '2024-03-05'),

-- Оставшиеся клиенты с одним контрактом
(6, 1, 1, 2, '2023-11-10', '2024-04-01', '2024-04-15'),
(7, 2, 2, 3, '2023-12-15', '2024-05-05', '2024-05-20'),
(8, 3, 3, 4, '2024-01-20', '2024-06-10', '2024-06-25'),
(9, 4, 4, 5, '2024-02-25', '2024-07-15', '2024-07-30'),
(10, 5, 5, 6, '2024-03-30', '2024-08-20', '2024-09-05'),
(6, 1, 6, 7, '2024-04-10', '2024-10-01', '2024-10-15'),
(7, 2, 7, 8, '2024-05-15', '2024-11-05', '2024-11-20');

1. Создание ролей
-- Создаем роль начальника отдела продаж
CREATE ROLE sales_manager_lead WITH LOGIN PASSWORD 'LeadPassword123';

-- Создаем роль менеджера по продажам
CREATE ROLE sales_manager WITH LOGIN PASSWORD 'ManagerPassword123';

2. Назначение разрешений (permissions)
-- Начальник отдела продаж: полный доступ к клиентам и агентам
GRANT SELECT, INSERT, UPDATE, DELETE ON Clients TO sales_manager_lead;
GRANT SELECT, INSERT, UPDATE, DELETE ON Agents TO sales_manager_lead;

-- Менеджер по продажам: только чтение клиентов + возможность добавлять новых
GRANT SELECT, INSERT ON Clients TO sales_manager;

-- Оба могут просматривать контракты, но только начальник может изменять
GRANT SELECT ON Contracts TO sales_manager;
GRANT SELECT, INSERT, UPDATE, DELETE ON Contracts TO sales_manager_lead;

3. Создание пользователей и назначение им ролей
-- Создаем пользователя для начальника отдела продаж
CREATE USER boss_sales WITH PASSWORD 'BossPassword123';
GRANT sales_manager_lead TO boss_sales;

-- Создаем пользователя для менеджера по продажам
CREATE USER employee_sales WITH PASSWORD 'EmployeePassword123';
GRANT sales_manager TO employee_sales;

4. Проверка назначенных прав
-- Посмотреть все права для конкретной роли
SELECT grantee, privilege_type, table_name
FROM information_schema.role_table_grants
WHERE grantee IN ('sales_manager_lead', 'sales_manager');

-- Вариант с порядком действий: создания ролей, добавления пользователей, назначение ролей, назначение разрешений / permissions
-- 1. Создание ролей
CREATE ROLE sales_manager_lead;
CREATE ROLE sales_manager;

-- 2. Создание пользователей
CREATE USER boss_sales WITH PASSWORD 'Boss123';
CREATE USER employee_sales WITH PASSWORD 'Employee123';

-- 3. Назначение ролей пользователям
GRANT sales_manager_lead TO boss_sales;
GRANT sales_manager TO employee_sales;

-- 4. Назначение разрешений ролям
-- Начальник отдела продаж (полный доступ к клиентам, агентам, контрактам и предложениям без возможности удаления записей из любой таблицы для сохранения информации для будущей аналитики)
GRANT SELECT, INSERT, UPDATE ON clients, agents, contracts, offers TO sales_manager_lead;

-- Менеджер по продажам (может просматривать клиентов и добавлять новых, а также только просматривать контракты, предложения и агентов)
GRANT SELECT, INSERT ON clients TO sales_manager;
GRANT SELECT ON contracts, offers, agents TO sales_manager;


Функции (Functions)

1. Функция подсчёта минимальной и максимальной стоимости
CREATE FUNCTION get_min_max_resort_cost(resort_id_param INT)  
RETURNS TABLE (min_cost DECIMAL(10,2), max_cost DECIMAL(10,2))  
AS $$  
BEGIN  
    RETURN QUERY  
    SELECT MIN(cost), MAX(cost)  
    FROM offers  
    WHERE resort_id = resort_id_param;  
END;  
$$ LANGUAGE plpgsql;

Как использовать?
SELECT * FROM get_min_max_resort_cost(1);


2. Функция подсчета количества контрактов по клиенту
CREATE FUNCTION count_client_contracts(client_id_param INT)  
RETURNS INT AS $$  
DECLARE  
    contract_count INT;  
BEGIN  
    SELECT COUNT(*) INTO contract_count  
    FROM Contracts  
    WHERE client_id = client_id_param;  
    RETURN contract_count;  
END;  
$$ LANGUAGE plpgsql;

Возвращает количество контрактов, заключенных конкретным клиентом.

Как использовать?
SELECT * FROM count_client_contracts(1);


3. Функция получения полной информации о курорте по ID
CREATE FUNCTION get_resort_info(resort_id_param INT)  
RETURNS TABLE (name VARCHAR, type VARCHAR, quality INT, country VARCHAR, location VARCHAR) AS $$  
BEGIN  
    RETURN QUERY  
    SELECT name, type, quality, country, location  
    FROM Resorts  
    WHERE resort_id = resort_id_param;  
END;  
$$ LANGUAGE plpgsql;

Возвращает полную информацию о курорте.


Stored Procedures (SELECT + INSERT)
1. Процедура добавления нового клиента
CREATE PROCEDURE add_client(full_name_param VARCHAR, email_param VARCHAR, phone_param VARCHAR)  
LANGUAGE plpgsql  
AS $$  
BEGIN  
    INSERT INTO Clients (full_name, email, phone)  
    VALUES (full_name_param, email_param, phone_param);  
END;  
$$;

2. Процедура добавления нового контракта
CREATE PROCEDURE add_contract(client_id_param INT, agent_id_param INT, resort_id_param INT, offer_id_param INT, sign_date_param DATE, rest_start_param DATE, rest_end_param DATE)  
LANGUAGE plpgsql  
AS $$  
BEGIN  
    INSERT INTO Contracts (client_id, agent_id, resort_id, offer_id, sign_date, rest_start, rest_end)  
    VALUES (client_id_param, agent_id_param, resort_id_param, offer_id_param, sign_date_param, rest_start_param, rest_end_param);  
END;  
$$;

Stored Procedures (UPDATE)
1. Процедура обновления информации о клиенте
CREATE PROCEDURE update_client_info(
    p_client_id INT,
    p_full_name VARCHAR(255) DEFAULT NULL,
    p_email VARCHAR(50) DEFAULT NULL,
    p_phone VARCHAR(20) DEFAULT NULL
)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE Clients
    SET 
        full_name = COALESCE(p_full_name, full_name),
        email = COALESCE(p_email, email),
        phone = COALESCE(p_phone, phone)
    WHERE client_id = p_client_id;
END;
$$;

Используется COALESCE(), который оставляет старое значение, если новый параметр NULL.
Теперь можно передавать только нужное поле для изменения, а остальные сохранят текущие данные.

Обновить только имя:
CALL update_client_info(1, 'John Updated', NULL, NULL);

Обновить только email:
CALL update_client_info(1, NULL, 'new.email@example.com', NULL);

Обновить только телефон:
CALL update_client_info(1, NULL, NULL, '+123456700');

Обновить всё сразу:
CALL update_client_info(1, 'John Updated', 'new.email@example.com', '+123456700');

Теперь процедура обновляет только переданные поля, а остальные остаются без изменений! 


2. Процедура обновления стоимости предложения
CREATE PROCEDURE update_offer_cost(offer_id_param INT, new_cost DECIMAL(10,2))  
LANGUAGE plpgsql  
AS $$  
BEGIN  
    UPDATE Offers  
    SET cost = new_cost  
    WHERE offer_id = offer_id_param;  
END;  
$$;

Обновляет стоимость конкретного предложения.


Вот код, который касается только таблицы Clients и выполняет все требования задания:

1. Функции
1.1. Функция для получения количества клиентов
Эта функция возвращает количество клиентов в таблице Clients.
CREATE FUNCTION get_clients_count() RETURNS INT AS $$
DECLARE
    client_count INT;
BEGIN
    SELECT COUNT(*) INTO client_count FROM Clients;
    RETURN client_count;
END;
$$ LANGUAGE plpgsql;

✅ Пример вызова:
SELECT get_clients_count();

1.2. Функция для получения клиента по ID
Эта функция возвращает ФИО, email и телефон клиента по его client_id.
CREATE FUNCTION get_client_by_id(p_client_id INT)
RETURNS TABLE (full_name VARCHAR, email VARCHAR, phone VARCHAR) AS $$
BEGIN
    RETURN QUERY SELECT full_name, email, phone FROM Clients WHERE client_id = p_client_id;
END;
$$ LANGUAGE plpgsql;

✅ Пример вызова:
SELECT * FROM get_client_by_id(1);

1.3. Функция для проверки существования email в базе
Эта функция проверяет, существует ли уже такой email в таблице Clients.
CREATE FUNCTION email_exists(p_email VARCHAR) RETURNS BOOLEAN AS $$
DECLARE
    exists_flag BOOLEAN;
BEGIN
    SELECT EXISTS (SELECT 1 FROM Clients WHERE email = p_email) INTO exists_flag;
    RETURN exists_flag;
END;
$$ LANGUAGE plpgsql;

✅ Пример вызова:
SELECT email_exists('john.doe@example.com');

2. Процедуры (SELECT + INSERT)
2.1. Процедура добавления нового клиента
Добавляет нового клиента в таблицу Clients, если email и телефон не повторяются.
CREATE PROCEDURE add_client(
    p_full_name VARCHAR(255),
    p_email VARCHAR(50),
    p_phone VARCHAR(20)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Проверяем, существует ли уже такой email или телефон
    IF EXISTS (SELECT 1 FROM Clients WHERE email = p_email OR phone = p_phone) THEN
        RAISE EXCEPTION 'Клиент с таким email или телефоном уже существует!';
    END IF;

    -- Вставка нового клиента
    INSERT INTO Clients (full_name, email, phone) VALUES (p_full_name, p_email, p_phone);
END;
$$;

✅ Пример вызова:
CALL add_client('New Client', 'new.client@example.com', '+1122334455');

2.2. Процедура поиска клиента по email - вариант процедуры — с OUT параметрами
Этот вариант передаёт результат через OUT-параметры:
CREATE PROCEDURE get_client_by_email(
    IN client_email VARCHAR,
    OUT client_id INT,
    OUT full_name VARCHAR,
    OUT phone VARCHAR,
    OUT created_at TIMESTAMP
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Получаем данные клиента
    SELECT c.client_id, c.full_name, c.phone, c.created_at 
    INTO client_id, full_name, phone, created_at
    FROM Clients c 
    WHERE c.email = client_email;
END;
$$;

✅ Как вызвать эту процедуру и получить данные?
CALL get_client_by_email('john.doe@example.com', NULL, NULL, NULL, NULL);


3. Процедуры (UPDATE)
3.1. Процедура обновления информации о клиенте
Обновляет только переданные параметры (если параметр NULL, то поле не изменяется).
CREATE PROCEDURE update_client_info(
    p_client_id INT,
    p_full_name VARCHAR(255) DEFAULT NULL,
    p_email VARCHAR(50) DEFAULT NULL,
    p_phone VARCHAR(20) DEFAULT NULL
)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE Clients
    SET 
        full_name = COALESCE(p_full_name, full_name),
        email = COALESCE(p_email, email),
        phone = COALESCE(p_phone, phone)
    WHERE client_id = p_client_id;
END;
$$;

✅ Пример вызова:
CALL update_client_info(1, 'John Updated', NULL, NULL);
(Обновится только имя клиента, а email и телефон останутся прежними.)

3.2. Процедура обновления email клиента
Обновляет только email клиента, если новый email не занят.
CREATE PROCEDURE update_client_email(
    p_client_id INT,
    p_new_email VARCHAR(50)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Проверяем, существует ли уже такой email
    IF EXISTS (SELECT 1 FROM Clients WHERE email = p_new_email) THEN
        RAISE EXCEPTION 'Email уже используется другим клиентом!';
    END IF;

    -- Обновляем email клиента
    UPDATE Clients SET email = p_new_email WHERE client_id = p_client_id;
END;
$$;

✅ Пример вызова:
CALL update_client_email(1, 'new.email@example.com');

✅ Итог:
3 функции:
get_clients_count() — количество клиентов
get_client_by_id(client_id) — информация о клиенте
email_exists(email) — проверка существования email
2 процедуры (SELECT + INSERT):
add_client(full_name, email, phone) — добавить клиента
get_all_clients() — получить всех клиентов
2 процедуры (UPDATE):
update_client_info(client_id, full_name, email, phone) — обновить только переданные поля
update_client_email(client_id, new_email) — обновить только email, если не занят