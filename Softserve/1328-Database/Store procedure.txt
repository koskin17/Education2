-- STORED PROCEDURE
-- Главное отличие в том, что процедуры принимает аргументы, но не возвращает результат.
-- Процедуры используются как раз в том случае, когда в Базу Данных вносятся изменения.
-- У процедуры нет возможности сделать ROLLBACK.
-- Процедуру нельзя использовать как часть SELECT.
-- Перехват исключений / EXCEPTION:
	DO $$
		BEGIN
			RAISE EXCEPTION 'Helo exeption'
		USING HINT = 'Please check your query';
			EXCEPTION
				WHEN OTHERS THEN
				RAISE WARNING 'Exeption was handles!';
		END;
	$$;
	
	-- К примеру, создаём STORE PROCEDURE, которая будет делать новые заказы в магазине
	CREATE OR REPLACE PROCEDURE myshop.process_order(id BIGINT)
	LANGUAGE plpgsql
	AS $$
	BEGIN
		-- Делаем UPDATE кол-ва продуктов в products
		UPDATE myshop.products
		-- На сумму, которую заказали / на которую оформили заказ
		SET quantity = myshop.products.quantity - op.quantity
		-- Кол-во заказанного берём из таблицы ordered_products
		FROM myshop.ordered_products AS op
		-- При условии, что заказанный id продукта совпадает с id продукта в каталоге и при условии, что id продукта совпадает с id, который мы передали в качестве продукта
		WHERE op.product_id = myshop.products.products_id AND op.order_id = id;

		-- Если всё хорошо и всё выполнилось, то мы фиксируем изменения в БД, т.е. делает COMMIT
		COMMIT;

		-- Если же что-то пошло не так, то делаем / ловим EXCEPTION
		-- При условии, что мы не может знать заранее что может произойти, то ставим EXCEPTION OTHER и в этом случае просто откатываемся назад, т.е. ROLLBACK все внесённые изменения
	EXCEPTION 
		WHEN OTHERS THEN
			ROLLBACK;
			-- И показываем предупреждение с использованием форматирвоанной строки: ставим знак "%" в тех местах, куда будем подтягивать переменные и потом через запятую в том же порядке указываем переменные, которые должны вставиться
			-- SQLERRM - это кастомная переменная, которая существует в рамках блока WHEN
			RAISE WARNING 'Failed to process order %: %', id, SQLERRM;
	END;
	$$;

	-- Теперь вызываем созданную STORE PROCEDURE
	CALL myshop.process_order(1)
	
-- Значения в PROCEDURE по умолчанию / DEFAULT
-- Суть в том, что все аргументы для STORE PROCEDURE могут иметь значения по умолчанию / DEFAULT VALUES

-- IN, OUT, INOUT параметры в STOREPROCEDURE
-- К примеру, создаём процедуру, которая будет обновлять кол-во продуктов
-- Передаваться будет INOUT параметр - дельта, на которую мы хотим изменить кол-во продукта
-- Также будет передаваться id продукта, по которому мы хотим изменить кол-во
	CREATE OR REPLACE PROCEDURE myshop.adjust_product_quantity(INOUT product_quantity INT, id BIGINT)
	LANGUAGE plpgsql
	AS $$
	BEGIN
		-- Указываем, что обновлять таблицу products
		UPDATE myshop.products
		-- В ней обновляем / устанавливаем количество продукту, которое равно имеющееся + сумма измения
		SET quantity = quantity + product_quantity
		-- При условии, что id продукта равно id, который передан в процедуру
		WHERE product_id = id;

		-- Теперь отображаем новой кол-во
		SELECT quantity INTO product_quantity FROM myshop.products WHERE product_id = id;
	END;
	$$;

	-- Теперь проверяем,что предыдущая процедура сработала.
	-- Для этого создаём анонимную функцию
	DO $$
	DECLARE
		qty INT := 10;
	BEGIN
		-- Теперь внутри анонимной функции делаем запрос к STORE procedure и передаём наше qty, на которое хотим изменить кол-ва продукта, и id того продукта, кол-во которого изменяем
		CALL myshop.adjust_product_quantity(qty, 1);

		-- Теперь показываем результат путем выборки SELECT нового количества, но так, как Suoabase не показывал кол-во на лекции, то решили это новое кол-во вывести хитрым способом - через EXCEPTION
		RAISE EXCEPTION 'New quantity: %', qty;
	END;  
$$