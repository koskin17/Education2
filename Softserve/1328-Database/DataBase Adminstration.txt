-- Посмотреть имеющиеся разрешения на конкретную таблицу
SELECT * FROM information_schema.role_table_grants
WHERE table_name = 'offers' AND table_schema = 'public'

-- Создать пользователя Базы Данных.
-- Пользователи не привязываются к конкретной schema. Они создаются в глобальном объекте.
-- После создания пользователя у тебя ещё нет никаких прав, т.е. он ничего делать с БД ничего не может.
CREATE USER patron WITH PASSWORD 'password';

-- Создание ролей
CREATE ROLE readonly;

CREATE ROLE readwrite;

-- Выдача ролей пользователям.
-- При этом важно помнить, что просто выдача роли пользователю недостаточно для того, чтобы он мог получить доступ к БД и совершать какие-то действия в БД.
GRANT readonly TO mykola;

GRANT readwrite TO patron;

-- К примеры, мы не хотим показывать кому-то информацию из таблицы БД.
-- И, к примеру, мы хотим дать доступ только к определённым колонкам: product_name и product_id
GRANT SELECT(product_id, product_name) ON products TO readonly;
-- В этом случае запрос пользователя SELECT * FROM products не сработает
-- А запрос SELECT product_id FROM products сработает
-- Также запрос SELECT не сработает на ту колонку, которая не была указана в GRANT SELECT(перечень колонок, к которым открывается доступ для роли с правами readonly)

-- На лекции не было возможности работать со схемой myshop (что-то не работало у преподавателя) и он предложил вариант создания VIEW для схемы myshop, чтобы пользователь мог всё-таки обратиться к таблицам схемы и получить какие-то данные, в соответствии со своими правами.
CREATE VIEW products_view AS (
  SELECT * FROM products
)
-- Но доступа к этой вьюшке у пользователя не было. Для предоставления доступа пользователю к вьюшке products_view выполнили команду:
GRANT SELECT ON products_view TO readonly;
-- Т.е. возможности читать информацию из таблицы не было, но мы дали права читать информацию из вьюшки.
-- В результате пользователь извне может сделать запрос SELECT * FROM products_view; к вьюшке и получить всю информацию, которая есть в вьюшке.
SELECT * FROM products_view;
-- Т.е. мы можем полностью запретить доступ к таблицам в БД, но сделать необходимые вьюшки и пользователям, в зависимсти от ролей, давать доступ к этим вьюшкам.
-- Так как у нас роль readonly и права только на чтение, то и запрос UPDATE не будет работать.

-- Теперь переходим к роли reawwrite и даём доступ для этой роли на SELECT и на UPDATE, но UPDATE позволяем только определённых колонок.
GRANT SELECT, UPDATE(product_name) ON products TO readwrite;
-- В этом случае все пользователи, у которых есть роль readwrite получают возможность не только SELECT из products, но и возможность делать UPDATE, но только колонки products_name. Сделать UPDATE другим колонкам будет невозможно.

UPDATE products SET product_name = 'Tea' WHERE product_id = 1;

-- Дать разрешение на INSERT во все таблицы пользователям в ролью readwrite
GRANT INSERT ON ALL TABLES IN SCHEMA public TO readwrite;

-- Если же есть вьюшка из таблицы, для которой были удалены разрешения, то доступ к вьюшке всё-равно остаётся.

-- Удаление разрешений
-- Для удаления разрешения используется команда REVOKE:
	- REVOKE SELECT ON products FROM readonly; - удалить разрешение на SELECT в таблице products у роли readonly. Т.е. у всех пользователей с рлолью readonly будет удалено разрешение выполнять SELECT из таблицы products;
	- REVOKE INSERT ON titles FROM guest; - убрать разрешение на вставку данных в поле title у пользователей в ролью guest;
- Аналогично удаляется разрешение что-либо делать у конкретного пользователя:
	- REVOKE INSERT, UPDATE ON authors FROM mary; - удалить разрешение на INSERT и UPDATE таблицы authors у пользователя mary;
- Удаляем все разрешения у конкретного пользователя:
	- REVOKE ALL ON bussiness_book FROM mary; - удалить все разрешения для таблицы bussiness_book у пользователя mary
-- Удаляем всю роль для пользователя:
	-- REVOKE readwrite FROM patron; - удаление роли у конкретного пользователя;
-- Удалений всtq роли из Базы Данных:
	-- Если у роли есть permissions (разрешения), то сразу удалить роль не получится. Сначала надо удалить все permissions у роли: REVOKE ALL IN ALL TABLES IN SCHEMA public FROM readonly;
	-- Только потом выполнять команду удаления роли: DROP ROLE readonly;

-- Удаление пользователей из Базы Данных происходит аналогично:
-- DROP USER patron;