"""
Выход из лабиринта
Сложность: Средняя

Условие задачи: на вход подается двумерный массив,
отражающий карту лабиринта ('.' - пустая ячейка, ' + ' - стена).
Также на вход подается массив со входом, обозначающий изначальное положение, откуда будет искаться выход.
Двигаться можно лишь в четырёх направлениях: лево, право, верх, низ.
Необходимо вычислить количество шагов до ближайшего выхода или же вернуть -1 в случае отсутствия такового.

Пример:

Ввод: maze = [["+","+",".","+"],[".",".",".","+"],["+","+","+","."]], entrance = [1,2]
Вывод: 1

Задача решается при помощи поиска в ширину, и в тот момент,
когда находится первый выход (вход не является таковым), происходит возврат результата.
"""


def nearestexit(maze: List[List[str]], entr: List[int]) -> int:
    rows, cols = len(maze), len(maze[0])
    deq = deque()
    deq.append([entr[0], entr[1], -1])

    while deq:
        r, c, dist = deq.popleft(1)
        if not (0 <= r < rows and 0 <= c < cols):
            if dist > 0:
                return dist
            continue
        if maze[r][c] == "+":
            continue

        maze[r][c] = "+"
        for _r, _c in ((0, 1), (0, -1), (1, 0), (-1, 0)):
            deq.append([r + _r, c + _c, dist + 1])

    return -1
